5/21技術1
○なぜモデルが必要か

・組み込み
自然現象、物理現象相手に制御

組込みソフトウェア開発は最終的に動いたものが仕様になりやすい
→品質に影響、修正・追加に時間がかかる、想定外のバグ

「分かりやすいソフトウェア開発」
・誰でも直せる
・影響範囲が分かる
　動かすだけを考えたロジック
　保守性UP

意図や全体像が把握できるものが必要
→別途資料が必要


・部品化
・抽象化
いかに別の枠に分けれるか
→モデルで表現

理解度チェック(1)

1.なぜ、近年の組込みソフトウェア開発では、品質が悪化しがちなのでしょうか？

　a.理由は？
　「現物あわせ」で作りこむ開発スタイルだから。
　　プログラミングが先行、試行錯誤的開発をしている。
　b.どのように悪化しがちですか？
　　煩雑＆複雑なロジック、意味が分からないロジック、どこに何が書いてあるのか把握できない。
　　品質が悪化、生産性が低下。

2.分かりやすいソフトウェア開発を行うための大きな２つのポイントとは何でしょうか？
　・動かすことだけを考えた、手続き主体の巨大なロジックを作成
　・長期的なメンテナンスや機能追加をしやすくする

3.「モデル」と「部品」の関係
　モデルで抽象化して部品を具体化

共有ができる
→レビューがしやすい
　モデルを使ってコミュニケーションが取れる


○ソフトウェアの開発の進め方と モデルの活用

試行錯誤の結果のソースコードだけが残っている状態で開発し、ソフトウェアの設計図がない事が多い
→機能の織り込み忘れや対応漏れが発生する
　複雑化


開発メンバが活用できる、わかりやすい成果物
・文章
・モデル(ソフトウェアの設計図)

UML
機能・構造・振舞いを対象にモデル化
・ユースケース図
・オブジェクト図、クラス図
・シーケンス図、コミュニケーション図、ステートマシン図、アクティビティ図
参照：chap-02
2-6、2-7

自分たちがアウトプットした成果物を大会で提出
まねした成果物でもいいが、自分たちが試行錯誤したもののほうがよい

・スケジューリング
・モデル図レビュー
・コードレビュー
・テスト

理解度チェック(2)

1.手順を踏まずになりゆきで開発するとどのような問題を起こすでしょうか？
a.なぜ「段階的」に開発することが重要なのでしょうか？

期限までに機能が実現できなかったり、作業に追われるうちに機能の織り込み忘れや必要な変更の対応漏れが発生する。
多発する変更に対して、より短い時間での対応に迫られる状況に陥りやすいので、暫定処置的な処置を積み重ねて複雑化する。
⇒ 現物合わせで試行錯誤したソフトウェアになる [1-2参照]
設計図がなくソフトウェア全体が把握できない状態で開発し、思わぬところで不具合が発生する。

「段階的=工程」

漏れが出る。
計画的にやるため。

2.ソフトウェア作成までの開発工程を４つに分けるとすると、それぞれなんという工程の名前になりますか？
a.上記４つの工程への入力と出力される成果物は通常どのようなものがありますか？
b.それぞれの成果物にはどのようなUMLの図（モデル）を使いますか？
c.それぞれの工程で行った活動の「正しさ」を確認、検証する工程はそれぞれ何と呼ばれますか？

 要求文章(入力)
 システム構成図(入力)
 ハードウェア仕様(入力)
要求分析→システムテスト
 要件定義書 ユースケース図、アクティビティ図(出力、入力)
基本設計→結合テスト
 基本設計書 オブジェクト図、クラス図、シーケンス図、コミュニケーション図、ステートマシン図(出力、入力)
詳細設計→単体テスト
 詳細設計書 オブジェクト図、クラス図、クラス図、シーケンス図、ステートマシン図(出力、入力)
実装→デバッグ、コードレビュー
 ソースコード
 
3.UMLとは何ですか？
a.UMLでモデル化する時の「３つの視点」とは何でしょうか？

・部品を図の要素として表現する
・部品の組合わせを、図の要素のまとまりやつながりとして表現する

「機能・構造・振舞い」

4.モデル作成のスコープとは何でしたか？
対象。

